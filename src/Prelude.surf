module Prelude where

id : (a : Type) -> a -> a
id = \ _ b . b

const : (a : Type) -> (b : Type) -> a -> b -> a
const = \ _ _ a b . a

and : Type -> Type -> Type
and = \p q. (c: Type) -> (p -> q -> c) -> c

data Bool : Type where
  true : Bool
  false : Bool

data Maybe : Type -> Type where
  just : a -> Maybe a
  nothing : Maybe a
